<?php
/**
 * @description: 深度理解冒泡排序
 * @date       : 2015-03-16  
 * @author     : zhanghuan<xueyutianlang@163.com>
 *
 **/

//冒泡排序的思想是两两对比，前者大于后者的话位置互换，最后大的泡逐个冒出
//情景：一年级全班学生站在一排，比年龄。规则是从左边起两两互相比，年龄小的换到年龄大的左边。
//第一轮结束
//此时产生新的队伍再次进行第二轮。
//第二轮结束
//………………
$arr=array(4,2,1,6,3);  
$len=count($arr);
//该层循环控制 需要冒泡的轮数
//两两对比的话产生的轮数为$len - 1
for($i=1;$i<$len;$i++)
{ //该层循环用来控制每轮 冒出一个数 需要比较的次数
	//       $k  $len-$i
	//队伍 4 2 1 6 3       
	//top1:  0   5-1     for($k=0;$k<4;$k++) 意思是第一个人可以跟除自己以外的人进行年龄对比
	//队伍 2 1 4 3 6(冒出)
	//top2:  0   5-2     for($k=0;$k<3;$k++) 意思是第一个人(第一遍比后产生的第一人)可以跟除自己以外的人进行年龄对比
	//队伍 1 2 3 4(冒出) 6(冒出)
	//top3:  0   5-3     for($k=0;$k<2;$k++) 意思是第一个人(第二遍比后产生第一人)可以跟除自己以外的人进行年龄对比 
	//队伍 1 2 3(冒出) 4(冒出) 6(冒出)
	//top4:  0   5-4     for($k=0;$k<1;$k++) 意思是第一个人(第三遍比后产生第一人)可以跟自己以外的人进行年龄对比
	for($k=0;$k<$len-$i;$k++)
	{   
		//       次数     $k  $k+1   $arr[$k]   $ar[$k+1]
		//top1: top1-1    0     1       4      >   2       4和2进行位置对换
		//      top1-2    1     2       4      >   1       4和1进行位置对换 
		//      top1-3    2     3       4      <   6       不进行位置对换
		//      top1-4    3     4       6      >   3 　　  6和3进行位置对换　
		//***************************************************************************
		//top2: top2-1    0     1       2      >   1       2和1进行位置对换  
		//      top2-2    1     2       2      <   4       不进行位置对换
		//      top2-3    2     3       4      >   3  　　 4和3进行位置对换
		//**************************************************************************
		//top3: top3-1    0     1       1      <   2       不进行位置对换  
		//　　　top3-1    1     2       2      <   3       不进行位置对换    
		//**************************************************************************
		//top4: top4-1    0     1       1      <   2       不进行位置对换  
		if($arr[$k]>$arr[$k+1])
		{
			//比较次数　　位置　　换后位置
			//top1-1:  　　2 4  　2 4 1 6 3 
			//top1-2:      1 4    2 1 4 6 3
			//top1-3:      4 6    2 1 4 6 3
			//top1-4:      3 6    2 1 4 3 6(冒出)
			//**********************************
			//top2-1:      1 2    1 2 4 3 
			//top2-2:      2 4    1 2 4 3  
			//top2-3:      3 4    1 2 3 4(冒出) 
			//**********************************
			//top3-1:      1 2    1 2 3
			//top3-2:      2 3    1 2 3(冒出) 
			//**********************************
			//top4-1:      1 2    1 2(冒出)
			$tmp=$arr[$k+1];
			$arr[$k+1]=$arr[$k];
			$arr[$k]=$tmp;
		}
	}
}
?>
